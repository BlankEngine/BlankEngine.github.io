{
    "name" : "BlankEngine.Core",
    "description" : "The core module that BlankEngine runs on. We allow modifications, but it may break the engine. Please tamper with care",
    "scripts" : [
        "bindings",
        "Application.bindings",
        "Object.bindings",
        "Resources",
        "Debug",
        "Time",
        "Input/Input",
        "Input/KeyCode",
        "Scripting/Component",
        "Scripting/Behavior",
        "Scripting/GameBehavior",
        "Math/Math.bindings",
        "Math/Matrix3x3",
        {
            "src" : "Math/Vector2",
            "classes" : [
                {
                    "name" : "Vector2",
                    "type" : 0,
                    "args" : [
                        {
                            "name" : "x",
                            "type" : "number"
                        },
                        {
                            "name" : "y",
                            "type" : "number"
                        }
                    ]
                }
            ]
        },
        {
            "src" : "Math/Color",
            "classes" : [
                {
                    "name" : "Color",
                    "type" : 0,
                    "construction" : "return new Color(data.r, data.g, data.b, data.a);"
                }
            ]
        },
        {
            "src" : "Math/Geometry/Rect",
            "classes" : [
                {
                    "name" : "Rect",
                    "type" : 0,
                    "construction" : "return new Rect(data.x, data.y, data.width, data.height);"
                }
            ]
        },
        "Math/Geometry/Ray",
        "Math/Geometry/Bounds",
        {
            "src" : "Transform/Transform",
            "classes" : [
                {
                    "name" : "Transform",
                    "type" : 0,
                    "construction" : "if (data.scale == null) data.scale = Vector2.one; if (data.scale.x == null) data.scale.x = 1; if (data.scale.y == null) data.scale.y = 1; return new Transform(await toObject(\"Vector2\", data.position), data.rotation, await toObject(\"Vector2\", data.scale));"
                }
            ]
        },
        {
            "src" : "GameObject",
            "classes" : [
                {
                    "name" : "GameObject",
                    "type" : 0,
                    "construction" : "return new GameObject(data.name, data.components, data.active, await toObject(\"Transform\", data.transform));"
                }
            ]
        },
        "SceneManager/SceneManager",
        "SceneManager/Scene",
        "PlayerLoop/PlayerLoop",
        "PlayerLoop/PlayerLoopSystem",
        "Graphics/Shaders/Shader",
        "Graphics/Shaders/GraphicsBuffer",
        "Graphics/Shaders/ShaderAttribute",
        {
            "src" : "Graphics/Shaders/Material",
            "classes" : [
                {
                    "name" : "Material",
                    "type" : 0,
                    "construction" : "if (typeof data === \"string\") Resources.Find(data).Duplicate(); else if (typeof data === \"object\") new Material(Shader.Find(data.vertexShader ?? \"Default/Standard\", \"VERTEX\"), Shader.Find(data.fragmentShader ?? \"Default/Standard\", \"FRAGMENT\"));"
                },
                {
                    "name" : "Material",
                    "type" : 1,
                    "construction" : "return new Material(Shader.Find(data.vertexShader ?? \"Default/Standard\", \"VERTEX\"), Shader.Find(data.fragmentShader ?? \"Default/Standard\", \"FRAGMENT\"));"
                }
            ]
        },
        {
            "src" : "Graphics/Texture",
            "classes" : [
                {
                    "name" : "Texture",
                    "type" : 1,
                    "construction" : "const output = new Texture(data.src); await output.Load(); const sprites = data.sprites ?? []; for (let i = 0; i < sprites.length; i++) { const sprite = sprites[i]; const rect = sprite.rect == null ? null : await toObject(\"Rect\", sprite.rect); const newSprite = new Sprite(output, rect); if (sprite.pivot != null) newSprite.pivot = await toObject(\"Vector2\", sprite.pivot); output.sprites.push(newSprite); } return output;",
                    "args" : [
                        {
                            "name" : "wrapMode",
                            "type" : "number"
                        },
                        {
                            "name" : "filterMode",
                            "type" : "number"
                        }
                    ]
                }
            ]
        },
        {
            "src" : "Graphics/Sprite",
            "classes" : [
                {
                    "name" : "Sprite",
                    "type" : 0,
                    "construction" : "const output = Resources.Find(data.texture).sprites[data.index ?? 0].Duplicate(); if (data.rect != null) output.rect = await toObject(\"Rect\", data.rect); return output;",
                    "args" : [
                        {
                            "name" : "pivot",
                            "type" : "Vector2"
                        }
                    ]
                }
            ]
        },
        {
            "src" : "Graphics/Rendering/Camera",
            "classes" : [
                {
                    "name" : "Camera",
                    "type" : 0,
                    "args" : [
                        {
                            "name" : "orthographicSize",
                            "type" : "number"
                        }
                    ]
                }
            ]
        },
        {
            "src" : "Graphics/Rendering/Renderers/SpriteRenderer",
            "classes" : [
                {
                    "name" : "SpriteRenderer",
                    "type" : 0,
                    "construction" : "return new SpriteRenderer(await toObject(\"Sprite\", data.sprite), await toObject(\"Material\", data.material));",
                    "args" : [
                        {
                            "name" : "color",
                            "type" : "Color"
                        }
                    ]
                }
            ]
        }
    ]
}